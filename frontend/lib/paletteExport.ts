import { Palette } from '@/store/paletteStore'

export const exportPaletteAsJSON = (palette: Palette) => {
  const exportData = {
    name: palette.name,
    description: palette.description,
    colors: palette.colors,
    createdAt: palette.createdAt,
    exportedAt: new Date().toISOString(),
    exportedBy: 'Colorra Web App'
  }
  
  const dataStr = JSON.stringify(exportData, null, 2)
  const dataBlob = new Blob([dataStr], { type: 'application/json' })
  
  const link = document.createElement('a')
  link.href = URL.createObjectURL(dataBlob)
  link.download = `${palette.name.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_palette.json`
  document.body.appendChild(link)
  link.click()
  document.body.removeChild(link)
  
  URL.revokeObjectURL(link.href)
}

export const exportPaletteAsCSS = (palette: Palette) => {
  const cssContent = `/* ${palette.name} Color Palette */
/* Generated by Colorra Web App */
/* ${palette.description || 'No description'} */

:root {
${palette.colors.map((color, index) => `  --color-${index + 1}: ${color};`).join('\n')}
}

/* Color classes */
${palette.colors.map((color, index) => `.color-${index + 1} {
  color: ${color};
}

.bg-color-${index + 1} {
  background-color: ${color};
}

.border-color-${index + 1} {
  border-color: ${color};
}`).join('\n\n')}
`
  
  const dataBlob = new Blob([cssContent], { type: 'text/css' })
  
  const link = document.createElement('a')
  link.href = URL.createObjectURL(dataBlob)
  link.download = `${palette.name.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_palette.css`
  document.body.appendChild(link)
  link.click()
  document.body.removeChild(link)
  
  URL.revokeObjectURL(link.href)
}

export const exportPaletteAsSCSS = (palette: Palette) => {
  const scssContent = `// ${palette.name} Color Palette
// Generated by Colorra Web App
// ${palette.description || 'No description'}

${palette.colors.map((color, index) => `$color-${index + 1}: ${color};`).join('\n')}

// Color map
$palette-colors: (
${palette.colors.map((color, index) => `  "color-${index + 1}": ${color},`).join('\n')}
);

// Utility mixins
@mixin color($name) {
  color: map-get($palette-colors, $name);
}

@mixin bg-color($name) {
  background-color: map-get($palette-colors, $name);
}

@mixin border-color($name) {
  border-color: map-get($palette-colors, $name);
}
`
  
  const dataBlob = new Blob([scssContent], { type: 'text/scss' })
  
  const link = document.createElement('a')
  link.href = URL.createObjectURL(dataBlob)
  link.download = `${palette.name.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_palette.scss`
  document.body.appendChild(link)
  link.click()
  document.body.removeChild(link)
  
  URL.revokeObjectURL(link.href)
}

export const copyPaletteToClipboard = async (palette: Palette, format: 'hex' | 'rgb' | 'hsl' = 'hex') => {
  let colorsText = ''
  
  switch (format) {
    case 'hex':
      colorsText = palette.colors.join(', ')
      break
    case 'rgb':
      colorsText = palette.colors.map(hexToRgb).join(', ')
      break
    case 'hsl':
      colorsText = palette.colors.map(hexToHsl).join(', ')
      break
  }
  
  const text = `${palette.name}\n${colorsText}`
  
  try {
    await navigator.clipboard.writeText(text)
    return true
  } catch (error) {
    console.error('Failed to copy to clipboard:', error)
    return false
  }
}

// Helper functions for color conversion
function hexToRgb(hex: string): string {
  const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex)
  if (!result) return hex
  
  const r = parseInt(result[1], 16)
  const g = parseInt(result[2], 16)
  const b = parseInt(result[3], 16)
  
  return `rgb(${r}, ${g}, ${b})`
}

function hexToHsl(hex: string): string {
  const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex)
  if (!result) return hex
  
  let r = parseInt(result[1], 16) / 255
  let g = parseInt(result[2], 16) / 255
  let b = parseInt(result[3], 16) / 255
  
  const max = Math.max(r, g, b)
  const min = Math.min(r, g, b)
  let h = 0
  let s = 0
  const l = (max + min) / 2
  
  if (max !== min) {
    const d = max - min
    s = l > 0.5 ? d / (2 - max - min) : d / (max + min)
    
    switch (max) {
      case r:
        h = (g - b) / d + (g < b ? 6 : 0)
        break
      case g:
        h = (b - r) / d + 2
        break
      case b:
        h = (r - g) / d + 4
        break
    }
    h /= 6
  }
  
  return `hsl(${Math.round(h * 360)}, ${Math.round(s * 100)}%, ${Math.round(l * 100)}%)`
}
